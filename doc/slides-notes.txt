1. In the manager example: Say that we don't want to rely on programmers to
tell the story, instead let the revision history tell the story.

2. Get rid of the adjacency matrix. Replace it with an example group of trees
that comes from a specific threshold.

3. Mention $\tau$ and how we fix the similarity metric while varying $\tau$.

6. Get rid of language designer arguments, focus on: people who need to understand changes

9. Can I work one specific example the whole way?

10. Slow down. Breath. Record myself and make the slides match what I say.

11. Give the audience more time to understand the complicated slides (esp. kvreduce)

12. kvreduce example should come sooner and explain the plesant surprise

17. Spend more time elaborating on the workflow diagram and be better about
tying things back to it.

19. Tree *size* not tree *height*

21b. Should the tree on this slide use a tree with a hole or a mismatch?

-- From Kyle

- distill motivation slide into readable example. Also,  I agree with bbarenblat about moving motivating examples up to front. It took me a while to grok  what your proposed technique and tools were trying to accomplish.

- assorted formatting. ie. The anti unification example slide.

- Many of the examples could use a simplification to make the core ideas you're trying to convey readily apparent. Especially the similarity grid plot. Could you perhaps focus in on a particularly interesting part? 

- Have any examples for yang algorithm plot points? eg. This is what 40% similarity might look like, etc. 

Future work questions:

why not cpp? I'm curious about examining structural differences on different types of lexical tokens.

Have you considered examining code movement over revisions? Arcs of changes that return to previous patterns?

That's all I have.  I liked the talk. The tool looks very useful.  Personally, I'm especially excited about the recognition of an incomplete set of pattern changes. "you changed this over there, but not this here. Check that." 



-- Done

4. Typo: argument instead of arugment

5. Typo: use a hyphen in anti-unification?

7. We all know line based diff is bad, fewer slides about it

8. More horizontal spacing in the antiunify/treediff notation

13. Perhaps the format should be: We need to understand changes. Exploit the
structure. Here is an example of something our tool pointed out to us. Now I'll
explain how we got there.

14. Mention our source on github? Add thank you to funding DoE and galois to
exit slide

15. Fix the bogus lock.acquire example. Our au wouldn't generate those patterns.

16. Be more consistent about text vs. bullet points.

18. Kill the Aterm slide

20. Only one number of groups slide not both.

21a. Fix typo on au slide with subtree B->F instead of B->D.

22. Slide "Patterns as a function of threshold", put the name of the project
the slide comes from into the title. Add the $\tau$s. And generally just make
it explicit that it comes from a real example.
JED: It's not in the paper and I can't tell :(

23. Remove "shortcomings" slide and move some of the points to a "Future Work" slide

